exports.id = "src_server_js-node_modules_mongodb_lib_core_connection_sync_recursive-node_modules_mongodb_li-deeaa8";
exports.ids = ["src_server_js-node_modules_mongodb_lib_core_connection_sync_recursive-node_modules_mongodb_li-deeaa8"];
exports.modules = {

/***/ "./src/adapters/http-adapter.js":
/*!**************************************!*\
  !*** ./src/adapters/http-adapter.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildCallback)
/* harmony export */ });

/**
 * @callback httpController
 * @param {{
 *  body:{key1,keyN},
 *  query:{key1},
 *  params:{key1,keyN},
 *  log:(functionName)=>void
 * }} httpRequest
 * @returns {{
 *  body:{key1,keyN},
 *  headers:{key1,keyN}
 * }}
 */

/**
 * @param {httpController} controller
 */

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function buildCallback(controller) {
  return /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(req, res) {
      var httpRequest;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              httpRequest = {
                body: req.body,
                query: req.query,
                params: req.params,
                //ip: req.ip,
                method: req.method,
                path: req.path,
                // headers: {
                //   "Content-Type": req.get("Content-Type"),
                //   Referer: req.get("referer"),
                //   "User-Agent": req.get("User-Agent"),
                // },
                log: function log(func) {
                  //const { source = {}, ...payload } = httpRequest.body;
                  //source.ip = httpRequest.ip;
                  //source.browser = httpRequest.headers["User-Agent"];
                  // if (httpRequest.headers["Referer"]) {
                  //   source.referrer = httpRequest.headers["Referer"];
                  // }
                  console.info(_objectSpread({
                    "function": func,
                    method: httpRequest.method,
                    params: httpRequest.params,
                    query: httpRequest.query
                  }, httpRequest.body));
                }
              };
              return _context.abrupt("return", controller(httpRequest).then(function (httpResponse) {
                if (httpResponse.headers) {
                  res.set(httpResponse.headers);
                }

                res.type("json");
                res.status(httpResponse.statusCode).send(httpResponse.body);
                return httpResponse;
              })["catch"](function (e) {
                return res.status(500).send({
                  error: "An unkown error occurred."
                });
              }));

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
}

/***/ }),

/***/ "./src/adapters/persistence-adapter.js":
/*!*********************************************!*\
  !*** ./src/adapters/persistence-adapter.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "save": () => (/* binding */ save),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "find": () => (/* binding */ find),
/* harmony export */   "update": () => (/* binding */ update),
/* harmony export */   "close": () => (/* binding */ close)
/* harmony export */ });
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


function save(service) {
  return /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
      var model, result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              model = _ref.model;
              _context.next = 3;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(service.save(model));

            case 3:
              result = _context.sent;

              if (!result.ok) {
                _context.next = 6;
                break;
              }

              return _context.abrupt("return", result.data);

            case 6:
              throw new Error(result.error);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }();
}
function remove(service) {
  return /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
      var model, result;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              model = _ref3.model;
              _context2.next = 3;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(service["delete"](model));

            case 3:
              result = _context2.sent;

              if (!result.ok) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt("return", result.data);

            case 6:
              throw new Error(result.error);

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref4.apply(this, arguments);
    };
  }();
}
function find(service) {
  return /*#__PURE__*/function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref5) {
      var model, result;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              model = _ref5.model;
              _context3.next = 3;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(service.find(model));

            case 3:
              result = _context3.sent;

              if (!result.ok) {
                _context3.next = 6;
                break;
              }

              return _context3.abrupt("return", result.data);

            case 6:
              throw new Error(result.error);

            case 7:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref6.apply(this, arguments);
    };
  }();
}
function update(service) {
  return /*#__PURE__*/function () {
    var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref7) {
      var model, _ref7$args, changes, result;

      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              model = _ref7.model, _ref7$args = _slicedToArray(_ref7.args, 1), changes = _ref7$args[0];
              _context4.next = 3;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(service.update(model, changes));

            case 3:
              result = _context4.sent;

              if (!result.ok) {
                _context4.next = 6;
                break;
              }

              return _context4.abrupt("return", result.data);

            case 6:
              throw new Error(result.error);

            case 7:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    return function (_x4) {
      return _ref8.apply(this, arguments);
    };
  }();
}
function close(service) {
  return function () {
    try {
      service.close();
    } catch (error) {
      console.error(error);
      throw new Error(error);
    }
  };
}

/***/ }),

/***/ "./src/controllers/delete-model.js":
/*!*****************************************!*\
  !*** ./src/controllers/delete-model.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ deleteModelFactory)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 *
 * @param {import("../use-cases/remove-model").removeModel} removeModel
 * @returns {import("../adapters/http-adapter").httpController}
 */
function deleteModelFactory(removeModel, hash) {
  return /*#__PURE__*/function () {
    var _deleteModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(deleteModel.name);
              _context.next = 4;
              return removeModel(httpRequest.params.id);

            case 4:
              model = _context.sent;
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json",
                  "Last-Modified": new Date().toUTCString(),
                  ETag: hash(JSON.stringify(model))
                },
                statusCode: 201,
                body: {
                  modelId: model.getId()
                }
              });

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);

              if (!(_context.t0.message === "no such id")) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 404
              });

            case 13:
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    function deleteModel(_x) {
      return _deleteModel.apply(this, arguments);
    }

    return deleteModel;
  }();
}

/***/ }),

/***/ "./src/controllers/get-config.js":
/*!***************************************!*\
  !*** ./src/controllers/get-config.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getConfigFactory)
/* harmony export */ });


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function getConfigFactory(listConfigs) {
  return /*#__PURE__*/function () {
    var _getConfig = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var configs;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(getConfig.name);
              _context.next = 4;
              return listConfigs();

            case 4:
              configs = _context.sent;
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 200,
                body: configs
              });

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    function getConfig(_x) {
      return _getConfig.apply(this, arguments);
    }

    return getConfig;
  }();
}

/***/ }),

/***/ "./src/controllers/get-model-by-id.js":
/*!********************************************!*\
  !*** ./src/controllers/get-model-by-id.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getModelByIdFactory)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * @param {import("../use-cases/find-model").findModel} findModel
 * @returns {import("../adapters/http-adapter").httpController}
 */
function getModelByIdFactory(findModel) {
  return /*#__PURE__*/function () {
    var _getModelById = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var id, query, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(getModelById.name);
              id = httpRequest.params.id;
              query = httpRequest.query;
              _context.next = 6;
              return findModel(id, query);

            case 6:
              model = _context.sent;
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 200,
                body: model
              });

            case 10:
              _context.prev = 10;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0.message);

              if (!(_context.t0.message === "no such id")) {
                _context.next = 15;
                break;
              }

              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 404
              });

            case 15:
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 10]]);
    }));

    function getModelById(_x) {
      return _getModelById.apply(this, arguments);
    }

    return getModelById;
  }();
}

/***/ }),

/***/ "./src/controllers/get-models.js":
/*!***************************************!*\
  !*** ./src/controllers/get-models.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getModelsFactory)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 *
 * @param {import("../use-cases/list-models").listModels} listModels
 * @returns {import("../adapters/http-adapter").httpController}
 */
function getModelsFactory(listModels) {
  return /*#__PURE__*/function () {
    var _getModels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var models;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(getModels.name);
              _context.next = 4;
              return listModels(httpRequest.query);

            case 4:
              models = _context.sent;
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 200,
                body: models
              });

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 12:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    function getModels(_x) {
      return _getModels.apply(this, arguments);
    }

    return getModels;
  }();
}

/***/ }),

/***/ "./src/controllers/index.js":
/*!**********************************!*\
  !*** ./src/controllers/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "postModels": () => (/* binding */ postModels),
/* harmony export */   "patchModels": () => (/* binding */ patchModels),
/* harmony export */   "getModels": () => (/* binding */ getModels),
/* harmony export */   "getModelsById": () => (/* binding */ getModelsById),
/* harmony export */   "deleteModels": () => (/* binding */ deleteModels),
/* harmony export */   "getConfig": () => (/* binding */ getConfig),
/* harmony export */   "initCache": () => (/* binding */ initCache)
/* harmony export */ });
/* harmony import */ var _use_cases__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../use-cases */ "./src/use-cases/index.js");
/* harmony import */ var _post_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./post-model */ "./src/controllers/post-model.js");
/* harmony import */ var _patch_model__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./patch-model */ "./src/controllers/patch-model.js");
/* harmony import */ var _get_models__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get-models */ "./src/controllers/get-models.js");
/* harmony import */ var _get_model_by_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./get-model-by-id */ "./src/controllers/get-model-by-id.js");
/* harmony import */ var _delete_model__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./delete-model */ "./src/controllers/delete-model.js");
/* harmony import */ var _get_config__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./get-config */ "./src/controllers/get-config.js");
/* harmony import */ var _lib_hash__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../lib/hash */ "./src/lib/hash.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }










function make(useCases, controllerFactory) {
  return useCases().map(function (uc) {
    return {
      endpoint: uc.endpoint,
      fn: controllerFactory(uc.fn, _lib_hash__WEBPACK_IMPORTED_MODULE_7__.default)
    };
  });
}

var postModels = function postModels() {
  return make(_use_cases__WEBPACK_IMPORTED_MODULE_0__.addModels, _post_model__WEBPACK_IMPORTED_MODULE_1__.default);
};
var patchModels = function patchModels() {
  return make(_use_cases__WEBPACK_IMPORTED_MODULE_0__.editModels, _patch_model__WEBPACK_IMPORTED_MODULE_2__.default);
};
var getModels = function getModels() {
  return make(_use_cases__WEBPACK_IMPORTED_MODULE_0__.listModels, _get_models__WEBPACK_IMPORTED_MODULE_3__.default);
};
var getModelsById = function getModelsById() {
  return make(_use_cases__WEBPACK_IMPORTED_MODULE_0__.findModels, _get_model_by_id__WEBPACK_IMPORTED_MODULE_4__.default);
};
var deleteModels = function deleteModels() {
  return make(_use_cases__WEBPACK_IMPORTED_MODULE_0__.removeModels, _delete_model__WEBPACK_IMPORTED_MODULE_5__.default);
};
var getConfig = function getConfig() {
  return (0,_get_config__WEBPACK_IMPORTED_MODULE_6__.default)((0,_use_cases__WEBPACK_IMPORTED_MODULE_0__.listConfigs)());
};
var initCache = function initCache() {
  var label = "\ntime to load cache";
  var models = (0,_use_cases__WEBPACK_IMPORTED_MODULE_0__.loadModels)();

  function load() {
    return _load.apply(this, arguments);
  }

  function _load() {
    _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              console.time(label);
              _context2.next = 3;
              return Promise.all(models.map( /*#__PURE__*/function () {
                var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(m) {
                  return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          return _context.abrupt("return", m.fn());

                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee);
                }));

                return function (_x) {
                  return _ref.apply(this, arguments);
                };
              }()));

            case 3:
              console.timeEnd(label);
              (0,_use_cases__WEBPACK_IMPORTED_MODULE_0__.registerCacheEvents)();

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _load.apply(this, arguments);
  }

  return {
    load: load
  };
};

/***/ }),

/***/ "./src/controllers/patch-model.js":
/*!****************************************!*\
  !*** ./src/controllers/patch-model.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ patchModelFactory)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 *
 * @param {import("../use-cases/edit-model").editModel} editModel
 * @returns {import("../adapters/http-adapter").httpController}
 */
function patchModelFactory(editModel, hash) {
  return /*#__PURE__*/function () {
    var _patchModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var id, command, payload, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(patchModel.name);
              id = httpRequest.params.id;
              command = httpRequest.params.command;
              payload = httpRequest.body;
              _context.next = 7;
              return editModel(id, payload, command);

            case 7:
              model = _context.sent;
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json",
                  "Last-Modified": new Date().toUTCString(),
                  ETag: hash(JSON.stringify(model))
                },
                statusCode: 201,
                body: {
                  modelId: model.getId()
                }
              });

            case 11:
              _context.prev = 11;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);

              if (!(_context.t0.message === "no such id")) {
                _context.next = 16;
                break;
              }

              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 404
              });

            case 16:
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 17:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 11]]);
    }));

    function patchModel(_x) {
      return _patchModel.apply(this, arguments);
    }

    return patchModel;
  }();
}

/***/ }),

/***/ "./src/controllers/post-model.js":
/*!***************************************!*\
  !*** ./src/controllers/post-model.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ postModelFactory)
/* harmony export */ });

/**
 *
 * @param {import("../use-cases/add-model").addModel} addModel
 * @param {function():string} hash
 * @returns {import("../adapters/http-adapter").httpController}
 */

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function postModelFactory(addModel, hash) {
  return /*#__PURE__*/function () {
    var _postModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(httpRequest) {
      var model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              httpRequest.log(postModel.name);
              _context.next = 4;
              return addModel(httpRequest.body);

            case 4:
              model = _context.sent;
              console.debug({
                "function": addModel.name,
                output: model
              });
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json",
                  "Last-Modified": new Date().toUTCString(),
                  ETag: hash(JSON.stringify(model))
                },
                statusCode: 201,
                body: {
                  modelId: model.getId()
                }
              });

            case 9:
              _context.prev = 9;
              _context.t0 = _context["catch"](0);
              console.error(_context.t0);
              return _context.abrupt("return", {
                headers: {
                  "Content-Type": "application/json"
                },
                statusCode: 400,
                body: {
                  error: _context.t0.message
                }
              });

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 9]]);
    }));

    function postModel(_x) {
      return _postModel.apply(this, arguments);
    }

    return postModel;
  }();
}

/***/ }),

/***/ "./src/datasources/adapters/datasource-file.js":
/*!*****************************************************!*\
  !*** ./src/datasources/adapters/datasource-file.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSourceFile": () => (/* binding */ DataSourceFile)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ "path");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _datasource_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datasource-memory */ "./src/datasources/adapters/datasource-memory.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




var directoryName = process.env.DATASOURCE_FILE_DIRECTORY || __dirname;

var directoryPath = path__WEBPACK_IMPORTED_MODULE_1___default().resolve(__dirname, directoryName) || __dirname;
/**
 * Persistent storage on filesystem
 */


var DataSourceFile = /*#__PURE__*/function (_DataSourceMemory) {
  _inherits(DataSourceFile, _DataSourceMemory);

  var _super = _createSuper(DataSourceFile);

  /**
   * @param {Set} dataSource
   */
  function DataSourceFile(dataSource, factory, name) {
    _classCallCheck(this, DataSourceFile);

    return _super.call(this, dataSource, factory, name);
  }
  /**
   *
   * @param {{
   *  hydrate:function(Map<string,import("../../models/model").Model>),
   *  serializer:import("../../lib/serializer").Serializer,
   * }} param0
   */


  _createClass(DataSourceFile, [{
    key: "load",
    value: function () {
      var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
        var hydrate, serializer;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                hydrate = _ref.hydrate, serializer = _ref.serializer;
                this.file = path__WEBPACK_IMPORTED_MODULE_1___default().join(directoryPath, this.name.concat(".json"));
                this.serializer = serializer;
                this.dataSource = this.readFile(hydrate);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function load(_x) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: "replace",
    value: function replace(key, value) {
      if (value && this.serializer) {
        return this.serializer.serialize(key, value);
      }

      return value;
    }
  }, {
    key: "revive",
    value: function revive(key, value) {
      if (value && this.serializer) {
        return this.serializer.deserialize(key, value);
      }

      return value;
    }
  }, {
    key: "writeFile",
    value: function writeFile() {
      var dataStr = JSON.stringify(_toConsumableArray(this.dataSource), this.replace);
      fs__WEBPACK_IMPORTED_MODULE_0___default().writeFileSync(this.file, dataStr);
    }
    /**
     *
     */

  }, {
    key: "readFile",
    value: function readFile(hydrate) {
      if (fs__WEBPACK_IMPORTED_MODULE_0___default().existsSync(this.file)) {
        var models = fs__WEBPACK_IMPORTED_MODULE_0___default().readFileSync(this.file, "utf-8");

        if (models) {
          return hydrate(new Map(JSON.parse(models, this.revive)));
        }
      }

      return new Map();
    }
    /**
     * @override
     * @param {*} id
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _get(_getPrototypeOf(DataSourceFile.prototype), "delete", this).call(this, id);

              case 2:
                this.writeFile();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function _delete(_x2) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * @overrides
     * @param {*} id
     * @param {*} data
     */

  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id, data) {
        var ds;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _get(_getPrototypeOf(DataSourceFile.prototype), "save", this).call(this, id, data);

              case 2:
                ds = _context3.sent;
                this.writeFile();
                return _context3.abrupt("return", ds);

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function save(_x3, _x4) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "close",
    value: function close() {
      this.writeFile();
    }
  }]);

  return DataSourceFile;
}(_datasource_memory__WEBPACK_IMPORTED_MODULE_2__.DataSourceMemory);

/***/ }),

/***/ "./src/datasources/adapters/datasource-memory.js":
/*!*******************************************************!*\
  !*** ./src/datasources/adapters/datasource-memory.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSourceMemory": () => (/* binding */ DataSourceMemory)
/* harmony export */ });
/* harmony import */ var _datasource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datasource */ "./src/datasources/datasource.js");


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


/**
 * Temporary in-memory storage.
 */

var DataSourceMemory = /*#__PURE__*/function (_DataSource) {
  _inherits(DataSourceMemory, _DataSource);

  var _super = _createSuper(DataSourceMemory);

  function DataSourceMemory(dataSource, factory, name) {
    _classCallCheck(this, DataSourceMemory);

    return _super.call(this, dataSource, factory, name);
  }
  /**
   * Update cache and datasource. Sync cache of other
   * cluster members if running in cluster mode.
   * @override
   */


  _createClass(DataSourceMemory, [{
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, data) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (process.send === "function") {
                  /** send data to cluster members */
                  process.send({
                    cmd: "saveBroadcast",
                    pid: process.pid,
                    name: this.name,
                    data: data,
                    id: id
                  });
                }

                return _context.abrupt("return", this.dataSource.set(id, data).get(id));

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function save(_x, _x2) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "clusterSave",
    value: function () {
      var _clusterSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id, data) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", this.dataSource.set(id, data).get(id));

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function clusterSave(_x3, _x4) {
        return _clusterSave.apply(this, arguments);
      }

      return clusterSave;
    }()
    /**
     * @override
     */

  }, {
    key: "find",
    value: function () {
      var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", this.dataSource.get(id));

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function find(_x5) {
        return _find.apply(this, arguments);
      }

      return find;
    }()
    /**
     * @override
     */

  }, {
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(query) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt("return", this.listSync(query));

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function list(_x6) {
        return _list.apply(this, arguments);
      }

      return list;
    }()
    /**
     * Return filtered or unfiltered list of model instances in cache.
     * @override
     * @param {{key1,keyN}} query
     * @returns
     */

  }, {
    key: "listSync",
    value: function listSync(query) {
      var values = _toConsumableArray(this.dataSource.values());

      if (query) {
        var keys = Object.keys(query);

        if (keys.includes("count") && typeof keys.count === "number") {
          return values.splice(0, keys.count);
        }

        if (keys.length > 0) {
          return values.filter(function (v) {
            return keys.every(function (k) {
              return v[k] ? query[k] === v[k] : false;
            });
          });
        }
      }

      return values;
    }
    /**
     * @override
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (process.send === "function") {
                  process.send({
                    cmd: "deleteBroadcast",
                    pid: process.pid,
                    name: this.name,
                    id: id
                  });
                }

                this.dataSource["delete"](id);

              case 2:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function _delete(_x7) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "clusterDelete",
    value: function () {
      var _clusterDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                this.dataSource["delete"](id);

              case 1:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function clusterDelete(_x8) {
        return _clusterDelete.apply(this, arguments);
      }

      return clusterDelete;
    }()
  }]);

  return DataSourceMemory;
}(_datasource__WEBPACK_IMPORTED_MODULE_0__.default);

/***/ }),

/***/ "./src/datasources/adapters/datasource-mongodb.js":
/*!********************************************************!*\
  !*** ./src/datasources/adapters/datasource-mongodb.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSourceMongoDb": () => (/* binding */ DataSourceMongoDb)
/* harmony export */ });


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var MongoClient = __webpack_require__(/*! mongodb */ "./node_modules/mongodb/index.js").MongoClient;

var DataSourceMemory = __webpack_require__(/*! ./datasource-memory */ "./src/datasources/adapters/datasource-memory.js").DataSourceMemory;

var url = process.env.MONGODB_URL || "mongodb://localhost:27017";
var cacheSize = Number(process.env.CACHE_SIZE) || 300;
/**
 * MongoDB adapter extends in-memory datasource to support caching.
 * The cache is always updated first, which allows the system to run
 * even when the database is offline.
 */

var DataSourceMongoDb = /*#__PURE__*/function (_DataSourceMemory) {
  _inherits(DataSourceMongoDb, _DataSourceMemory);

  var _super = _createSuper(DataSourceMongoDb);

  function DataSourceMongoDb(datasource, factory, name) {
    var _this;

    _classCallCheck(this, DataSourceMongoDb);

    _this = _super.call(this, datasource, factory, name);
    _this.url = url;
    _this.cacheSize = cacheSize;
    return _this;
  }
  /**
   * @override
   * @param {{
   *  hydrate:function(Map<string,import("../../models").Model>),
   *  serializer:import("../../lib/serializer").Serializer
   * }} options
   */


  _createClass(DataSourceMongoDb, [{
    key: "load",
    value: function load(_ref) {
      var _this2 = this;

      var hydrate = _ref.hydrate,
          serializer = _ref.serializer;
      this.hydrate = hydrate;
      this.serializer = serializer;
      this.connectDb().then(function () {
        return _this2.setCollection();
      }).then(function () {
        return _this2.loadModels();
      })["catch"](function (e) {
        return console.error(e);
      });
    }
  }, {
    key: "connectDb",
    value: function () {
      var _connectDb = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.client) {
                  _context.next = 5;
                  break;
                }

                _context.next = 3;
                return MongoClient.connect(this.url, {
                  useNewUrlParser: true,
                  useUnifiedTopology: true
                });

              case 3:
                this.client = _context.sent;

                if (!this.client || !this.client.isConnected) {
                  console.error("can't connect to db - using memory", error);
                }

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function connectDb() {
        return _connectDb.apply(this, arguments);
      }

      return connectDb;
    }()
  }, {
    key: "setCollection",
    value: function setCollection() {
      try {
        this.collection = this.client.db(this.name).collection(this.name);
      } catch (error) {
        console.error("error setting collection", error);
      }
    }
  }, {
    key: "loadModels",
    value: function () {
      var _loadModels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this3 = this;

        var cursor;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                try {
                  cursor = this.collection.find().limit(this.cacheSize);
                  cursor.forEach( /*#__PURE__*/function () {
                    var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(model) {
                      return regeneratorRuntime.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              _context2.next = 2;
                              return _get(_getPrototypeOf(DataSourceMongoDb.prototype), "save", _this3).call(_this3, model.id, _this3.hydrate(model));

                            case 2:
                              return _context2.abrupt("return", _context2.sent);

                            case 3:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2);
                    }));

                    return function (_x) {
                      return _ref2.apply(this, arguments);
                    };
                  }());
                } catch (error) {
                  console.error(error);
                }

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function loadModels() {
        return _loadModels.apply(this, arguments);
      }

      return loadModels;
    }()
  }, {
    key: "checkConnection",
    value: function () {
      var _checkConnection = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(error) {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                console.error("check connection on error", error);

                if (!(!this.client || !this.client.isConnected)) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 5;
                return this.connectDb();

              case 5:
                this.setCollection();
                return _context4.abrupt("return", this.flush());

              case 7:
                _context4.next = 12;
                break;

              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4["catch"](0);
                console.error(_context4.t0);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 9]]);
      }));

      function checkConnection(_x2) {
        return _checkConnection.apply(this, arguments);
      }

      return checkConnection;
    }()
  }, {
    key: "findDb",
    value: function () {
      var _findDb = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id) {
        var model;
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.collection.findOne({
                  _id: id
                });

              case 2:
                model = _context5.sent;

                if (model) {
                  _context5.next = 7;
                  break;
                }

                _context5.next = 6;
                return this.checkConnection("document not found");

              case 6:
                return _context5.abrupt("return", model);

              case 7:
                return _context5.abrupt("return", _get(_getPrototypeOf(DataSourceMongoDb.prototype), "save", this).call(this, id, this.hydrate(model)));

              case 8:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function findDb(_x3) {
        return _findDb.apply(this, arguments);
      }

      return findDb;
    }()
    /**
     * Check the cache first.
     * @overrid
     * @param {*} id - `Model.id`
     */

  }, {
    key: "find",
    value: function () {
      var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        var cached;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.prev = 0;
                _context6.next = 3;
                return _get(_getPrototypeOf(DataSourceMongoDb.prototype), "find", this).call(this, id);

              case 3:
                cached = _context6.sent;

                if (cached) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt("return", this.findDb(id));

              case 6:
                return _context6.abrupt("return", cached);

              case 9:
                _context6.prev = 9;
                _context6.t0 = _context6["catch"](0);
                _context6.next = 13;
                return this.checkConnection(_context6.t0);

              case 13:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this, [[0, 9]]);
      }));

      function find(_x4) {
        return _find.apply(this, arguments);
      }

      return find;
    }()
  }, {
    key: "serialize",
    value: function serialize(data) {
      if (this.serializer) {
        return JSON.stringify(data, this.serializer.serialize);
      }

      return JSON.stringify(data);
    }
  }, {
    key: "saveDb",
    value: function () {
      var _saveDb = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id, data) {
        var clone;
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                clone = JSON.parse(this.serialize(data));
                _context7.next = 3;
                return this.collection.replaceOne({
                  _id: id
                }, _objectSpread(_objectSpread({}, clone), {}, {
                  _id: id
                }), {
                  upsert: true
                });

              case 3:
                return _context7.abrupt("return", data);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function saveDb(_x5, _x6) {
        return _saveDb.apply(this, arguments);
      }

      return saveDb;
    }()
    /**
     * Save to the cache first, then the db.
     * Wait for both functions to complete. We
     * keep running even if the db is offline.
     *
     * @override
     * @param {*} id
     * @param {*} data
     */

  }, {
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(id, data) {
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.next = 3;
                return Promise.allSettled([_get(_getPrototypeOf(DataSourceMongoDb.prototype), "save", this).call(this, id, data), this.saveDb(id, data)]);

              case 3:
                return _context8.abrupt("return", data);

              case 6:
                _context8.prev = 6;
                _context8.t0 = _context8["catch"](0);
                _context8.next = 10;
                return this.checkConnection(_context8.t0);

              case 10:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[0, 6]]);
      }));

      function save(_x7, _x8) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
    /**
     * @override
     * @param {{key1:string, keyN:string}} filter - e.g. http query
     * @param {boolean} cached - use the cache if true, otherwise go to db.
     */

  }, {
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
        var filter,
            cached,
            _args9 = arguments;
        return regeneratorRuntime.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                filter = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : null;
                cached = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : true;
                _context9.prev = 2;

                if (!cached) {
                  _context9.next = 5;
                  break;
                }

                return _context9.abrupt("return", _get(_getPrototypeOf(DataSourceMongoDb.prototype), "list", this).call(this, filter));

              case 5:
                _context9.next = 7;
                return this.collection.find().toArray();

              case 7:
                return _context9.abrupt("return", _context9.sent);

              case 10:
                _context9.prev = 10;
                _context9.t0 = _context9["catch"](2);
                _context9.next = 14;
                return this.checkConnection(_context9.t0);

              case 14:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this, [[2, 10]]);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
    /**
     * Delete from db, then cache.
     * If db fails, keep it cached.
     *
     * @override
     * @param {*} id
     */

  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(id) {
        return regeneratorRuntime.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                _context10.next = 3;
                return Promise.all([this.collection.deleteOne({
                  _id: id
                }), _get(_getPrototypeOf(DataSourceMongoDb.prototype), "delete", this).call(this, id)]);

              case 3:
                _context10.next = 8;
                break;

              case 5:
                _context10.prev = 5;
                _context10.t0 = _context10["catch"](0);
                console.error(_context10.t0);

              case 8:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this, [[0, 5]]);
      }));

      function _delete(_x9) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
    /**
     * Flush the cache to disk.
     */

  }, {
    key: "flush",
    value: function flush() {
      var _this4 = this;

      try {
        _toConsumableArray(this.dataSource.values()).reduce(function (data, model) {
          return data.then(_this4.saveDb(model.getId()));
        }, Promise.resolve());
      } catch (error) {
        console.error(error);
      }
    }
    /**
     * Process terminating, flush cache, close connections.
     * @override
     */

  }, {
    key: "close",
    value: function close() {
      this.flush();
      this.client.close();
    }
  }]);

  return DataSourceMongoDb;
}(DataSourceMemory);

/***/ }),

/***/ "./src/datasources/adapters/index.js":
/*!*******************************************!*\
  !*** ./src/datasources/adapters/index.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataSourceMemory": () => (/* reexport safe */ _datasource_memory__WEBPACK_IMPORTED_MODULE_0__.DataSourceMemory),
/* harmony export */   "DataSourceFile": () => (/* reexport safe */ _datasource_file__WEBPACK_IMPORTED_MODULE_1__.DataSourceFile),
/* harmony export */   "DataSourceMongoDb": () => (/* reexport safe */ _datasource_mongodb__WEBPACK_IMPORTED_MODULE_2__.DataSourceMongoDb)
/* harmony export */ });
/* harmony import */ var _datasource_memory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./datasource-memory */ "./src/datasources/adapters/datasource-memory.js");
/* harmony import */ var _datasource_file__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./datasource-file */ "./src/datasources/adapters/datasource-file.js");
/* harmony import */ var _datasource_mongodb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./datasource-mongodb */ "./src/datasources/adapters/datasource-mongodb.js");




/***/ }),

/***/ "./src/datasources/datasource.js":
/*!***************************************!*\
  !*** ./src/datasources/datasource.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ DataSource)
/* harmony export */ });


function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function roughSizeOfObject() {
  for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
    objects[_key] = arguments[_key];
  }

  var bytes = 0;
  objects.forEach(function (object) {
    var objectList = [];
    var stack = [object];
    console.log(objects);
    console.log(stack.length);

    while (stack.length) {
      var value = stack.pop();

      if (typeof value === "boolean") {
        bytes += 4;
      } else if (typeof value === "string") {
        bytes += value.length * 2;
      } else if (typeof value === "number") {
        bytes += 8;
      } else if (_typeof(value) === "object" && objectList.indexOf(value) === -1) {
        objectList.push(value);

        for (var i in value) {
          stack.push(value[i]);
        }
      }
    }
  });
  return bytes;
}
/**
 * Abstract datasource class
 */


var DataSource = /*#__PURE__*/function () {
  function DataSource(dataSource, factory, name) {
    _classCallCheck(this, DataSource);

    this.dataSource = dataSource;
    this.factory = factory;
    this.name = name;
  }
  /**
   * Upsert model instance
   * @param {*} id
   * @param {*} data
   */


  _createClass(DataSource, [{
    key: "save",
    value: function () {
      var _save = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, data) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("abstract method not implemented");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function save(_x, _x2) {
        return _save.apply(this, arguments);
      }

      return save;
    }()
  }, {
    key: "clusterSave",
    value: function () {
      var _clusterSave = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(id, data) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function clusterSave(_x3, _x4) {
        return _clusterSave.apply(this, arguments);
      }

      return clusterSave;
    }()
    /**
     * Find model instance by ID
     * @param {*} id record id
     * @returns {Promise<any>} record
     */

  }, {
    key: "find",
    value: function () {
      var _find = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                throw new Error("abstract method not implemented");

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function find(_x5) {
        return _find.apply(this, arguments);
      }

      return find;
    }()
    /**
     * list model instances
     * @param {boolean} [cached] - list cached items, default is true
     * @returns {Promise<any[]>}
     */

  }, {
    key: "list",
    value: function () {
      var _list = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var query,
            cached,
            _args4 = arguments;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                query = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : null;
                cached = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : true;
                throw new Error("abstract method not implemented");

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function list() {
        return _list.apply(this, arguments);
      }

      return list;
    }()
  }, {
    key: "listSync",
    value: function listSync(query) {}
  }, {
    key: "delete",
    value: function () {
      var _delete2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(id) {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                throw new Error("abstract method not implemented");

              case 1:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function _delete(_x6) {
        return _delete2.apply(this, arguments);
      }

      return _delete;
    }()
  }, {
    key: "clusterDelete",
    value: function () {
      var _clusterDelete = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(id) {
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      }));

      function clusterDelete(_x7) {
        return _clusterDelete.apply(this, arguments);
      }

      return clusterDelete;
    }()
    /**
     *
     * @param {*} options
     */

  }, {
    key: "load",
    value: function () {
      var _load = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(options) {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      }));

      function load(_x8) {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: "getFactory",
    value: function getFactory() {
      return this.factory;
    }
    /**
     *
     */

  }, {
    key: "getCacheSize",
    value: function getCacheSize() {
      return this.dataSource.size;
    }
  }, {
    key: "getCacheSizeBytes",
    value: function getCacheSizeBytes() {
      return this.dataSource.size * roughSizeOfObject(_toConsumableArray(this.dataSource)[0][1]);
    }
    /**
     *
     */

  }, {
    key: "close",
    value: function close() {}
  }]);

  return DataSource;
}();



/***/ }),

/***/ "./src/datasources/index.js":
/*!**********************************!*\
  !*** ./src/datasources/index.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transaction */ "./src/datasources/transaction.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models */ "./src/models/index.js");
/* harmony import */ var _adapters__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapters */ "./src/datasources/adapters/index.js");

/**
 * @typedef {import('../models').Model} Model
 */

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var adapter = process.env.DATASOURCE_ADAPTER || "DataSourceMemory";
var DefaultDataSource = _adapters__WEBPACK_IMPORTED_MODULE_2__[adapter];

function getBaseClass(name) {
  if (name === "DataSourceFile") {
    return __webpack_require__(/*! ./adapters */ "./src/datasources/adapters/index.js").DataSourceFile;
  }

  if (name === "DataSourceMongoDb") {
    return __webpack_require__(/*! ./adapters */ "./src/datasources/adapters/index.js").DataSourceMongoDb;
  }

  return __webpack_require__(/*! ./adapters */ "./src/datasources/adapters/index.js").DataSourceMemory;
}
/**
 * @todo handle all state same way
 */


var DataSourceFactory = function () {
  // References all DSes
  var dataSources;
  /**
   * Get datasource from model spec or return default for server.
   * @param {*} ds
   * @param {*} factory this factory
   * @param {*} name datasource name
   * @returns
   */

  function getSpecDataSource(ds, factory, name) {
    var spec = _models__WEBPACK_IMPORTED_MODULE_1__.default.getModelSpec(name);

    if (spec !== null && spec !== void 0 && spec.datasource) {
      var url = spec.datasource.url;
      var cacheSize = spec.datasource.cacheSize;
      var adapterFactory = spec.datasource.factory;
      var BaseClass = getBaseClass(spec.datasource.baseClass);

      try {
        var DataSource = adapterFactory(url, cacheSize, BaseClass);
        return new DataSource(ds, factory, name);
      } catch (error) {
        console.error(error);
      }
    } // use default datasource


    return new DefaultDataSource(ds, factory, name);
  }
  /**
   * Get the datasource for each model.
   * @param {string} name - model name
   * @param {boolean} cacheOnly - if true returns memory adapter, default is false
   */


  function getDataSource(name) {
    var cacheOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!dataSources) {
      dataSources = new Map();
    }

    if (dataSources.has(name)) {
      return dataSources.get(name);
    }

    if (cacheOnly) {
      var BaseClass = getBaseClass("DataSourceMemory");

      var _newDs = new BaseClass(new Map(), this, name);

      dataSources.set(name, _newDs);
      return _newDs;
    }

    var newDs = getSpecDataSource(new Map(), this, name);
    dataSources.set(name, newDs);
    return newDs;
  }

  function close() {
    dataSources.forEach(function (ds) {
      return ds.close();
    });
  }
  /**
   * Manage transaction across models and datasources
   * @param {import("../models/index").ports} ports
   */


  function executeTransaction(_x, _x2) {
    return _executeTransaction.apply(this, arguments);
  }

  function _executeTransaction() {
    _executeTransaction = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(models, updates) {
      var transx;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              transx = (0,_transaction__WEBPACK_IMPORTED_MODULE_0__.Transaction)(models, updates);
              transx.update().then(function (tx) {
                return tx.commit();
              })["catch"](function (e) {
                return console.log(e);
              });

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _executeTransaction.apply(this, arguments);
  }

  return Object.freeze({
    /**
     * Get `DataSource` singleton
     * @returns {import('./datasource').default} DataSource singleton
     */
    getDataSource: getDataSource,
    executeTransaction: executeTransaction,
    close: close
  });
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (DataSourceFactory);

/***/ }),

/***/ "./src/datasources/transaction.js":
/*!****************************************!*\
  !*** ./src/datasources/transaction.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transaction": () => (/* binding */ Transaction)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * @todo implement federated transaction (2-phase)
 * to cut down on eventual consistency
 * @param {import("../models").Model[]} models
 * @param {{model1:*,model2:*}} updates
 * @returns
 */
var Transaction = function Transaction(models, updates) {
  return {
    modified: null,
    vote: function vote() {
      var _this = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return Promise.all(models.map( /*#__PURE__*/function () {
                  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(m) {
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return m.vote(updates[m]);

                          case 2:
                            _context.t0 = _context.sent;
                            _context.t1 = m;
                            return _context.abrupt("return", {
                              "new": _context.t0,
                              old: _context.t1
                            });

                          case 5:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 2:
                _this.modified = _context2.sent;
                return _context2.abrupt("return", _this);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }))();
    },
    rollback: function rollback() {
      this.modified.map(function (m) {
        return m.old.commit();
      });
    },
    commit: function commit() {
      var _this2 = this;

      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return Promise.all(_this2.modified.map(function (m) {
                  return m["new"].then(function (m) {
                    return m.commit();
                  });
                }));

              case 3:
                console.log("transaction complete");
                _context3.next = 10;
                break;

              case 6:
                _context3.prev = 6;
                _context3.t0 = _context3["catch"](0);

                _this2.rollback();

                throw new Error("transaction rolled back");

              case 10:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, null, [[0, 6]]);
      }))();
    }
  };
};

/***/ }),

/***/ "./src/lib/check-acl.js":
/*!******************************!*\
  !*** ./src/lib/check-acl.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ checkAcl)
/* harmony export */ });
/* harmony import */ var _lib_make_array__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/make-array */ "./src/lib/make-array.js");



function checkAcl(requirement, allow) {
  var deny = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  console.log({
    func: checkAcl.name,
    requirement: requirement,
    allow: allow
  });
  return (0,_lib_make_array__WEBPACK_IMPORTED_MODULE_0__.default)(requirement).some(function (r) {
    return (0,_lib_make_array__WEBPACK_IMPORTED_MODULE_0__.default)(allow).includes(r);
  }) && (0,_lib_make_array__WEBPACK_IMPORTED_MODULE_0__.default)(requirement).every(function (r) {
    return !(0,_lib_make_array__WEBPACK_IMPORTED_MODULE_0__.default)(deny).includes(r);
  });
}

/***/ }),

/***/ "./src/lib/hash.js":
/*!*************************!*\
  !*** ./src/lib/hash.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ hash)
/* harmony export */ });
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ "crypto");
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);

function hash(data) {
  return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash('sha1').update(data).digest('hex');
}

/***/ }),

/***/ "./src/lib/serializer.js":
/*!*******************************!*\
  !*** ./src/lib/serializer.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "replaceMap": () => (/* binding */ replaceMap),
/* harmony export */   "replaceFunction": () => (/* binding */ replaceFunction),
/* harmony export */   "reviveFunction": () => (/* binding */ reviveFunction),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

/**
 * @typedef {import('../models/index').serializer} serializerType
 */

/**
 * @type {serializerType}
 */

var _serializers;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var replaceMap = {
  on: "serialize",
  key: "*",
  type: function type(key, value) {
    return value instanceof Map;
  },
  value: function value(key, _value) {
    return _toConsumableArray(_value);
  }
};
/**
 * @type {serializerType}
 */

var replaceFunction = {
  on: "serialize",
  key: "*",
  type: "function",
  value: function value(key, _value2) {
    return _value2.toString();
  }
};
/**
 * @type {serializerType}
 */

var reviveFunction = {
  on: "deserialize",
  key: "function",
  type: "string",
  value: function value(key, _value3) {
    return eval("(".concat(_value3, ")"));
  }
};
var type = {
  serialize: "serialize",
  deserialize: "deserialize"
};
var serializers = (_serializers = {}, _defineProperty(_serializers, type.serialize, []), _defineProperty(_serializers, type.deserialize, []), _serializers);
/**
 *
 * @param {serializerType} s
 */

function checkTypes(s) {
  return ["serialize", "deserialize"].includes(s.on) && (["function", "string"].includes(_typeof(s.key)) || s.key instanceof RexExp) && (["string", "number", "function", "object"].includes(s.type) || s.type instanceof RegExp || typeof s.type === "function") && typeof s.value === "function";
}
/**
 *
 * @param {serializerType} serializer
 */


function checkRequiredProps(serializer) {
  var requiredProps = ["on", "key", "type", "value"];
  var missing = requiredProps.filter(function (key) {
    return !serializer[key];
  });

  if (missing && missing.length > 0) {
    throw new Error("missing required property: ", missing);
  }
}
/**
 *
 * @param {serializerType[]} serializers
 * @returns {serializerType[]}
 */


function validateSerializer(serializers) {
  var newSerializers = Array.isArray(serializers) ? serializers : [serializers];
  var enabled = newSerializers.filter(function (n) {
    return n.enabled;
  });
  enabled.every(function (e) {
    return checkRequiredProps(e);
  });

  if (!enabled.every(function (e) {
    return checkTypes(e);
  })) {
    throw new Error("invalid serializer, check property types");
  }

  return enabled;
}

var keyApplies = {
  /**
   * @param {serializerType} s
   * @returns {boolean}
   */
  object: function object(s, k, v) {
    return s.key.test(k);
  },

  /**
   * @param {serializerType} s
   */
  string: function string(s, k, v) {
    return s.key === k || s.key === "*";
  },

  /**
   * @param {serializerType} s
   * @returns {boolean}
   */
  "function": function _function(s, k, v) {
    return s.key(k, v);
  }
};
var typeApplies = {
  /**
   * @param {serializerType} s
   * @returns {boolean}
   */
  object: function object(s, k, v) {
    return s.type.test(k);
  },

  /**
   * @param {serializerType} s
   */
  string: function string(s, k, v) {
    return s.type === _typeof(v);
  },

  /**
   * @param {serializerType} s
   * @returns {boolean}
   */
  "function": function _function(s, k, v) {
    return s.type(k, v);
  }
};
/**
 *
 * @param {serializerType} serializer
 * @param {*} key
 * @param {*} value
 * @returns {boolean}
 */

function applies(serializer, key, value) {
  return typeApplies[_typeof(serializer.type)](serializer, key, value) && keyApplies[_typeof(serializer.key)](serializer, key, value);
}

function findDeserializer(key, value) {
  return serializers[type.deserialize].find(function (s) {
    return applies(s, key, value);
  });
}

function findSerializer(key, value) {
  return serializers[type.serialize].find(function (s) {
    return applies(s, key, value);
  });
}
/**
 * @typedef {{
 *  addSerializer:function(serializerType|serializerType[]):Serializer,
 *  serialize(object):string,
 *  deserialize(string):object
 * }} Serializer Control de/serialization
 */

/**
 * @type {Serializer}
 */


var Serializer = {
  /**
   *
   * @param {serializerType | serializerType[]}
   */
  addSerializer: function addSerializer(s) {
    if (!s) return null;
    var newSerializers = validateSerializer(s);
    newSerializers.forEach(function (s) {
      return serializers[s.on].push(s);
    });
    return this;
  },
  serialize: function serialize(key, value) {
    var serializer = findSerializer(key, value);

    if (serializer) {
      return serializer.value(key, value);
    }

    return value;
  },
  deserialize: function deserialize(key, value) {
    var deserializer = findDeserializer(key, value);

    if (deserializer) {
      return deserializer.value(key, value);
    }

    return value;
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Serializer);

/***/ }),

/***/ "./src/models/observer.js":
/*!********************************!*\
  !*** ./src/models/observer.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* binding */ Observer),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @typedef {import('./event').Event} Event
 * @typedef {import('.').Model} Model
 */

/**
 * @callback eventHandler
 * @param {Event | Model | {eventName:string, Model}} eventData
 * @returns {Promise<void>}
 */

/**
 *
 * @param {Error} error
 */
var handleError = function handleError(error) {
  console.error({
    file: __filename,
    error: error
  });
};
/**
 * Abstract observer
 */


var Observer = /*#__PURE__*/function () {
  /**
   *
   * @param {Map<string | RegExp, eventHandler[]>} eventHandlers
   */
  function Observer(eventHandlers) {
    _classCallCheck(this, Observer);

    this.handlers = eventHandlers;
  }
  /**
   * Register callback `handler` to fire on event `eventName`
   * @param {String | RegExp} eventName
   * @param {eventHandler} handler
   * @param {boolean} [allowMultiple] - true by default; if false, event can be handled by only one callback
   */


  _createClass(Observer, [{
    key: "on",
    value: function on(eventName, handler) {
      var allowMultiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      throw new Error("unimplemented abstract method");
    }
    /**
     * Fire event `eventName` and pass `eventData` to listeners.
     * @param {String} eventName
     * @param {Event} eventData
     */

  }, {
    key: "notify",
    value: function () {
      var _notify = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(eventName, eventData) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                throw new Error("unimplemented abstract method");

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function notify(_x, _x2) {
        return _notify.apply(this, arguments);
      }

      return notify;
    }()
  }]);

  return Observer;
}();
/**
 * @type {Observer}
 * @extends Observer
 */

var ObserverImpl = /*#__PURE__*/function (_Observer) {
  _inherits(ObserverImpl, _Observer);

  var _super = _createSuper(ObserverImpl);

  /**
   * @override
   */
  function ObserverImpl(eventHandlers) {
    _classCallCheck(this, ObserverImpl);

    return _super.call(this, eventHandlers);
  }
  /**
   * @override
   * @param {string | RegExp} eventName
   * @param {eventHandler} handler
   * @param {boolean} [allowMultiple]
   */


  _createClass(ObserverImpl, [{
    key: "on",
    value: function on(eventName, handler) {
      var allowMultiple = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (!eventName || typeof handler !== "function") {
        throw new Error("eventName or handler invalid");
      }

      if (this.handlers.has(eventName)) {
        if (allowMultiple) {
          this.handlers.get(eventName).push(handler);
        }
      } else {
        this.handlers.set(eventName, [handler]);
      }
    }
    /**
     * @override
     */

  }, {
    key: "notify",
    value: function () {
      var _notify2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(eventName, eventData) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;

                if (!this.handlers.has(eventName)) {
                  _context2.next = 4;
                  break;
                }

                _context2.next = 4;
                return Promise.allSettled(this.handlers.get(eventName).map(function (handler) {
                  return handler(eventData);
                }));

              case 4:
                _context2.next = 6;
                return Promise.allSettled(_toConsumableArray(this.handlers).filter(function (_ref) {
                  var _ref2 = _slicedToArray(_ref, 2),
                      k = _ref2[0],
                      v = _ref2[1];

                  return k instanceof RegExp && k.test(eventName);
                }).map(function (_ref3) {
                  var _ref4 = _slicedToArray(_ref3, 2),
                      k = _ref4[0],
                      v = _ref4[1];

                  return v.map(function (f) {
                    return f(eventData);
                  });
                }));

              case 6:
                _context2.next = 11;
                break;

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](0);
                handleError(_context2.t0);

              case 11:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[0, 8]]);
      }));

      function notify(_x3, _x4) {
        return _notify2.apply(this, arguments);
      }

      return notify;
    }()
  }]);

  return ObserverImpl;
}(Observer);
/**
 * @todo handle all state same way
 */


var ObserverFactory = function () {
  var instance;

  function createInstance() {
    return new ObserverImpl(new Map());
  }

  return Object.freeze({
    /**
     * @returns {Observer} singleton
     */
    getInstance: function getInstance() {
      if (!instance) {
        instance = createInstance();
      }

      return instance;
    }
  });
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ObserverFactory);

/***/ }),

/***/ "./src/server.js":
/*!***********************!*\
  !*** ./src/server.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _controllers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./controllers */ "./src/controllers/index.js");
/* harmony import */ var _services_persistence_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/persistence-service */ "./src/services/persistence-service.js");
/* harmony import */ var _adapters_persistence_adapter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./adapters/persistence-adapter */ "./src/adapters/persistence-adapter.js");
/* harmony import */ var _adapters_http_adapter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./adapters/http-adapter */ "./src/adapters/http-adapter.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./models */ "./src/models/index.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }






var apiRoot = process.env.API_ROOT || "/microlib/api";
var modelPath = "".concat(apiRoot, "/models");

var idRoute = function idRoute(route) {
  return route.split("/").splice(0, 5).concat([":id"]).join("/");
};

var cmdRoute = function cmdRoute(route) {
  return route.split("/").splice(0, 6).concat([":id", ":command"]).join("/");
};

var RouteMap = /*#__PURE__*/function (_Map) {
  _inherits(RouteMap, _Map);

  var _super = _createSuper(RouteMap);

  function RouteMap() {
    _classCallCheck(this, RouteMap);

    return _super.apply(this, arguments);
  }

  _createClass(RouteMap, [{
    key: "has",
    value: function has(route) {
      if (!route) {
        console.warn("route is ", _typeof(route));
        return false;
      }

      if (_get(_getPrototypeOf(RouteMap.prototype), "has", this).call(this, route)) {
        this.route = _get(_getPrototypeOf(RouteMap.prototype), "get", this).call(this, route);
        return true;
      }

      var idInstance = idRoute(route);

      if (route.match(/\//g).length === 5 && _get(_getPrototypeOf(RouteMap.prototype), "has", this).call(this, idInstance)) {
        this.route = _get(_getPrototypeOf(RouteMap.prototype), "get", this).call(this, idInstance);
        return true;
      }

      var cmdInstance = cmdRoute(route);

      if (route.match(/\//g).length === 6 && _get(_getPrototypeOf(RouteMap.prototype), "has", this).call(this, cmdInstance)) {
        this.route = _get(_getPrototypeOf(RouteMap.prototype), "get", this).call(this, cmdInstance);
        return true;
      }

      return false;
    }
  }, {
    key: "get",
    value: function get(route) {
      return this.route ? this.route : _get(_getPrototypeOf(RouteMap.prototype), "get", this).call(this, route);
    }
  }]);

  return RouteMap;
}( /*#__PURE__*/_wrapNativeSuper(Map));

function isServerless() {
  return /serverless/i.test(process.title) || /true/i.test(process.env.SERVERLESS);
}

var Server = function () {
  var routes = new RouteMap();
  var serverless = isServerless();
  var serverMode = serverless ? "serverless" : "webserver";

  var endpoint = function endpoint(e) {
    return "".concat(modelPath, "/").concat(e);
  };

  var endpointId = function endpointId(e) {
    return "".concat(modelPath, "/").concat(e, "/:id");
  };

  var endpointCmd = function endpointCmd(e) {
    return "".concat(modelPath, "/").concat(e, "/:id/:command");
  };

  var remoteEntry = require("./remoteEntry");

  var getRemoteModules = remoteEntry.microlib.get("./models").then(function (factory) {
    var Module = factory();
    return Module.initRemotes;
  });
  var getRemoteEntries = remoteEntry.microlib.get("./remoteEntries").then(function (factory) {
    return factory();
  });

  function makeAdmin(app, adapter) {
    app.get("".concat(apiRoot, "/config"), adapter((0,_controllers__WEBPACK_IMPORTED_MODULE_0__.getConfig)()));
    routes.set("".concat(apiRoot, "/config"), {
      get: adapter((0,_controllers__WEBPACK_IMPORTED_MODULE_0__.getConfig)())
    });
  }

  var make = {
    /**
     * webServer mode - create routes and register controllers
     * @param {*} path
     * @param {*} app
     * @param {*} method
     * @param {*} controllers
     */
    webserver: function webserver(path, method, controllers, app) {
      controllers().forEach(function (ctlr) {
        console.info(ctlr);
        app[method](path(ctlr.endpoint), (0,_adapters_http_adapter__WEBPACK_IMPORTED_MODULE_3__.default)(ctlr.fn));
      });
    },

    /**
     * serverless mode - save routes, etc for fast lookup
     * @param {*} path
     * @param {*} method
     * @param {*} controllers
     */
    serverless: function serverless(path, method, controllers) {
      controllers().forEach(function (ctlr) {
        var route = path(ctlr.endpoint);

        if (routes.has(route)) {
          routes.set(route, _objectSpread(_objectSpread({}, routes.get(route)), {}, _defineProperty({}, method, (0,_adapters_http_adapter__WEBPACK_IMPORTED_MODULE_3__.default)(ctlr.fn))));
          return;
        }

        routes.set(route, _defineProperty({}, method, (0,_adapters_http_adapter__WEBPACK_IMPORTED_MODULE_3__.default)(ctlr.fn)));
      });
    }
  };
  /**
   * Call controllers directly in serverless mode.
   */

  function control(_x, _x2, _x3, _x4) {
    return _control.apply(this, arguments);
  }

  function _control() {
    _control = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(path, method, req, res) {
      var fn;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!routes.has(path)) {
                _context.next = 15;
                break;
              }

              _context.prev = 1;
              console.debug("path match: ", path);
              fn = routes.get(path)[method];

              if (!fn) {
                _context.next = 9;
                break;
              }

              console.debug("method match:", method);
              _context.next = 8;
              return fn(req, res);

            case 8:
              return _context.abrupt("return", _context.sent);

            case 9:
              console.warn("method not supported", path, method);
              _context.next = 15;
              break;

            case 12:
              _context.prev = 12;
              _context.t0 = _context["catch"](1);
              console.error("problem running controller", _context.t0);

            case 15:
              console.warn("potential config issue", path, method);

            case 16:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 12]]);
    }));
    return _control.apply(this, arguments);
  }

  function shutdown(shutdownTasks) {
    console.warn("Received SIGTERM - system shutdown in progress");
    shutdownTasks();
  }
  /**
   * Clear all non-webpack module cache, i.e.
   * everything bundled by remoteEntry.js (models
   * & remoteEntry config), which includes all the
   * user code downloaded from the remote. This is
   * the code that needs to be disposed of & reimported.
   */


  function clear() {
    try {
      (0,_adapters_persistence_adapter__WEBPACK_IMPORTED_MODULE_2__.close)();
      routes.clear();
      _models__WEBPACK_IMPORTED_MODULE_4__.default.clearModels();
      Object.keys(require.cache).forEach(function (k) {
        console.log("deleting cached module", k);
        delete require.cache[k];
      });
    } catch (error) {
      console.error(error);
    }
  }

  function start(_x5) {
    return _start.apply(this, arguments);
  }

  function _start() {
    _start = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(router) {
      var label, overrides;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              label = "\ntotal time to import & register remote modules";
              console.time(label);
              overrides = {
                save: _adapters_persistence_adapter__WEBPACK_IMPORTED_MODULE_2__.save,
                find: _adapters_persistence_adapter__WEBPACK_IMPORTED_MODULE_2__.find,
                Persistence: _services_persistence_service__WEBPACK_IMPORTED_MODULE_1__.Persistence
              };
              return _context3.abrupt("return", getRemoteEntries.then(function (remotes) {
                return getRemoteModules.then(function (initRemotes) {
                  return initRemotes(remotes, overrides).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                    var cache;
                    return regeneratorRuntime.wrap(function _callee2$(_context2) {
                      while (1) {
                        switch (_context2.prev = _context2.next) {
                          case 0:
                            cache = (0,_controllers__WEBPACK_IMPORTED_MODULE_0__.initCache)();
                            console.info("running in ".concat(serverMode, " mode"));
                            make[serverMode](endpoint, "get", _controllers__WEBPACK_IMPORTED_MODULE_0__.getModels, router);
                            make[serverMode](endpoint, "post", _controllers__WEBPACK_IMPORTED_MODULE_0__.postModels, router);
                            make[serverMode](endpointId, "get", _controllers__WEBPACK_IMPORTED_MODULE_0__.getModelsById, router);
                            make[serverMode](endpointId, "patch", _controllers__WEBPACK_IMPORTED_MODULE_0__.patchModels, router);
                            make[serverMode](endpointId, "delete", _controllers__WEBPACK_IMPORTED_MODULE_0__.deleteModels, router);
                            make[serverMode](endpointCmd, "patch", _controllers__WEBPACK_IMPORTED_MODULE_0__.patchModels, router);
                            makeAdmin(router, _adapters_http_adapter__WEBPACK_IMPORTED_MODULE_3__.default);
                            console.timeEnd(label);
                            console.info(routes);
                            _context2.next = 13;
                            return cache.load();

                          case 13:
                            process.on("sigterm", function () {
                              return shutdown(function () {
                                return (0,_adapters_persistence_adapter__WEBPACK_IMPORTED_MODULE_2__.close)();
                              });
                            });
                            return _context2.abrupt("return", control);

                          case 15:
                          case "end":
                            return _context2.stop();
                        }
                      }
                    }, _callee2);
                  })));
                });
              }));

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));
    return _start.apply(this, arguments);
  }

  return {
    clear: clear,
    start: start,
    control: control
  };
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Server);

/***/ }),

/***/ "./src/services/event-bus.js":
/*!***********************************!*\
  !*** ./src/services/event-bus.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var service;
var EventBus = {
  listen: function listen() {
    var _arguments = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var _service;

      var _len, args, _key;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (service) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return __webpack_require__.e(/*! import() */ "webpack_container_remote_microservices_event-bus").then(__webpack_require__.t.bind(__webpack_require__, /*! microservices/event-bus */ "webpack/container/remote/microservices/event-bus", 23));

            case 3:
              service = _context.sent.EventBus;

            case 4:
              for (_len = _arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = _arguments[_key];
              }

              console.debug("calling service.listen()", args);
              return _context.abrupt("return", (_service = service).listen.apply(_service, args));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  notify: function notify() {
    var _arguments2 = arguments;
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      var _service2;

      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (service) {
                _context2.next = 4;
                break;
              }

              _context2.next = 3;
              return __webpack_require__.e(/*! import() */ "webpack_container_remote_microservices_event-bus").then(__webpack_require__.t.bind(__webpack_require__, /*! microservices/event-bus */ "webpack/container/remote/microservices/event-bus", 23));

            case 3:
              service = _context2.sent.EventBus;

            case 4:
              return _context2.abrupt("return", (_service2 = service).notify.apply(_service2, _toConsumableArray(_arguments2)));

            case 5:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  }
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventBus);

/***/ }),

/***/ "./src/services/persistence-service.js":
/*!*********************************************!*\
  !*** ./src/services/persistence-service.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Persistence": () => (/* binding */ Persistence)
/* harmony export */ });
/* harmony import */ var _datasources__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../datasources */ "./src/datasources/index.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


var Persistence = {
  save: function save(model) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", _datasources__WEBPACK_IMPORTED_MODULE_0__.default.getDataSource(model.getName()).save(model.getId(), model));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  find: function find(model) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", _datasources__WEBPACK_IMPORTED_MODULE_0__.default.getDataSource(model.getName()).find(model.getId()));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  },
  close: function close() {
    _datasources__WEBPACK_IMPORTED_MODULE_0__.default.getFactory().close();
  }
};

/***/ }),

/***/ "./src/services/publish-event.js":
/*!***************************************!*\
  !*** ./src/services/publish-event.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (/*#__PURE__*/(function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event, observer) {
    var publishEvent;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return __webpack_require__.e(/*! import() */ "webpack_container_remote_microservices_services").then(__webpack_require__.t.bind(__webpack_require__, /*! microservices/services */ "webpack/container/remote/microservices/services", 23));

          case 3:
            publishEvent = _context.sent.publishEvent;
            publishEvent(event, observer);
            _context.next = 10;
            break;

          case 7:
            _context.prev = 7;
            _context.t0 = _context["catch"](0);
            console.error(_context.t0);

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 7]]);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})());

/***/ }),

/***/ "./src/use-cases/add-model.js":
/*!************************************!*\
  !*** ./src/use-cases/add-model.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ makeAddModel)
/* harmony export */ });
/* harmony import */ var _models_domain_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/domain-events */ "./src/models/domain-events.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


/**
 * @typedef {Object} dependencies injected dependencies
 * @property {String} modelName - name of the domain model
 * @property {import('../models/model-factory').ModelFactory} models - model factory
 * @property {import('../datasources/datasource').default} repository - persistence service
 * @property {import('../models/observer').Observer} observer - application events, propagated to domain
 * @property {...Function} handlers - event handlers can be registered by the domain
 */

/**
 * @typedef {function(ModelParam):Promise<import("../models").Model>} addModel
 * @param {dependencies} param0
 * @returns {function():Promise<import('../models').Model>}
 */

function makeAddModel() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      modelName = _ref.modelName,
      models = _ref.models,
      repository = _ref.repository,
      observer = _ref.observer,
      _ref$handlers = _ref.handlers,
      handlers = _ref$handlers === void 0 ? [] : _ref$handlers;

  var eventType = models.EventTypes.CREATE;
  var eventName = models.getEventName(eventType, modelName);
  handlers.forEach(function (handler) {
    return observer.on(eventName, handler);
  }); // Add an event whose callback invokes this factory.

  observer.on(_models_domain_events__WEBPACK_IMPORTED_MODULE_0__.default.addModel(eventName), addModel, false);

  function addModel(_x) {
    return _addModel.apply(this, arguments);
  }

  function _addModel() {
    _addModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(input) {
      var model, event;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return models.createModel(observer, repository, modelName, input);

            case 2:
              model = _context.sent;
              _context.next = 5;
              return models.createEvent(eventType, modelName, model);

            case 5:
              event = _context.sent;
              _context.prev = 6;
              _context.next = 9;
              return repository.save(model.getId(), model);

            case 9:
              _context.next = 11;
              return observer.notify(event.eventName, event);

            case 11:
              _context.next = 18;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](6);
              _context.next = 17;
              return repository["delete"](model.getId());

            case 17:
              throw new Error(_context.t0);

            case 18:
              return _context.abrupt("return", repository.find(model.getId()));

            case 19:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[6, 13]]);
    }));
    return _addModel.apply(this, arguments);
  }

  return addModel;
}

/***/ }),

/***/ "./src/use-cases/edit-model.js":
/*!*************************************!*\
  !*** ./src/use-cases/edit-model.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ makeEditModel)
/* harmony export */ });
/* harmony import */ var _execute_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./execute-command */ "./src/use-cases/execute-command.js");
/* harmony import */ var _invoke_port__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./invoke-port */ "./src/use-cases/invoke-port.js");
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");
/* harmony import */ var _models_domain_events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/domain-events */ "./src/models/domain-events.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }





/**
 * @typedef {Object} ModelParam
 * @property {String} modelName
 * @property {import('../models/model-factory').ModelFactory} models
 * @property {import('../datasources/datasource').default} repository
 * @property {import('../models/observer').Observer} observer
 * @property {Function[]} handlers
 */

/**
 * @typedef {function(ModelParam):Promise<import("../models").Model>} editModel
 * @param {ModelParam} param0
 * @returns {function():Promise<import("../models/model").Model>}
 */

function makeEditModel() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      modelName = _ref.modelName,
      models = _ref.models,
      repository = _ref.repository,
      observer = _ref.observer,
      _ref$handlers = _ref.handlers,
      handlers = _ref$handlers === void 0 ? [] : _ref$handlers;

  var eventType = models.EventTypes.UPDATE;
  var eventName = models.getEventName(eventType, modelName);
  handlers.forEach(function (handler) {
    return observer.on(eventName, handler);
  }); // Add an event that can be used to edit this model

  observer.on(_models_domain_events__WEBPACK_IMPORTED_MODULE_3__.default.editModel(eventName), editModelHandler);

  function editModel(_x, _x2, _x3) {
    return _editModel.apply(this, arguments);
  }

  function _editModel() {
    _editModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, changes, command) {
      var model, updated, event, result, _result;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return repository.find(id);

            case 2:
              model = _context.sent;

              if (model) {
                _context.next = 5;
                break;
              }

              throw new Error("no such id");

            case 5:
              updated = models.updateModel(model, changes);
              _context.next = 8;
              return models.createEvent(eventType, modelName, {
                updated: updated,
                changes: changes
              });

            case 8:
              event = _context.sent;
              _context.prev = 9;
              _context.next = 12;
              return repository.save(id, updated);

            case 12:
              _context.next = 14;
              return observer.notify(event.eventName, event);

            case 14:
              _context.next = 21;
              break;

            case 16:
              _context.prev = 16;
              _context.t0 = _context["catch"](9);
              _context.next = 20;
              return repository.save(id, model);

            case 20:
              throw new Error(_context.t0);

            case 21:
              if (!command) {
                _context.next = 27;
                break;
              }

              _context.next = 24;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_2__.default)((0,_execute_command__WEBPACK_IMPORTED_MODULE_0__.default)(updated, command, "write"));

            case 24:
              result = _context.sent;

              if (!result.ok) {
                _context.next = 27;
                break;
              }

              return _context.abrupt("return", result.data);

            case 27:
              if (!command) {
                _context.next = 33;
                break;
              }

              _context.next = 30;
              return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_2__.default)((0,_invoke_port__WEBPACK_IMPORTED_MODULE_1__.default)(updated, command, "write"));

            case 30:
              _result = _context.sent;

              if (!_result.ok) {
                _context.next = 33;
                break;
              }

              return _context.abrupt("return", _result.data);

            case 33:
              return _context.abrupt("return", updated);

            case 34:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[9, 16]]);
    }));
    return _editModel.apply(this, arguments);
  }

  function editModelHandler(_x4) {
    return _editModelHandler.apply(this, arguments);
  }

  function _editModelHandler() {
    _editModelHandler = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", editModel(event.id, event.changes, event.command));

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _editModelHandler.apply(this, arguments);
  }

  return editModel;
}

/***/ }),

/***/ "./src/use-cases/execute-command.js":
/*!******************************************!*\
  !*** ./src/use-cases/execute-command.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ executeCommand)
/* harmony export */ });
/* harmony import */ var _lib_check_acl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/check-acl */ "./src/lib/check-acl.js");
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");
/* harmony import */ var _models_domain_events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/domain-events */ "./src/models/domain-events.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var commandType = {
  /**
   *
   * @param {function(import("../models/model").Model)} command
   * @param {import("../models/model").Model} model
   */
  "function": function () {
    var _function2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(command, model) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", command(model));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function _function(_x, _x2) {
      return _function2.apply(this, arguments);
    }

    return _function;
  }(),

  /**
   *
   * @param {string} command
   * @param {import("../models/model").Model} model
   */
  string: function () {
    var _string = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(command, model) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt("return", model[command]());

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function string(_x3, _x4) {
      return _string.apply(this, arguments);
    }

    return string;
  }()
};

function commandAuthorized(spec, command, permission) {
  return command && spec.commands && spec.commands[command] && (0,_lib_check_acl__WEBPACK_IMPORTED_MODULE_0__.default)(spec.commands[command].acl, permission);
}
/**
 *
 * @param {import("../models/model").Model} model
 * @param {command:string} command - name of command
 * @param {string} permission - permission of caller
 */


function executeCommand(_x5, _x6, _x7) {
  return _executeCommand.apply(this, arguments);
}

function _executeCommand() {
  _executeCommand = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(model, command, permission) {
    var spec, cmd, result;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            spec = model.getSpec();

            if (!commandAuthorized(spec, command, permission)) {
              _context3.next = 10;
              break;
            }

            cmd = spec.commands[command].command;

            if (!(typeof cmd === "function" || model[cmd])) {
              _context3.next = 9;
              break;
            }

            _context3.next = 6;
            return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_1__.default)(commandType[_typeof(cmd)](cmd, model));

          case 6:
            result = _context3.sent;

            if (!result.ok) {
              _context3.next = 9;
              break;
            }

            return _context3.abrupt("return", _objectSpread(_objectSpread({}, model), result.data));

          case 9:
            console.warn("command not found", command);

          case 10:
            model.emit(_models_domain_events__WEBPACK_IMPORTED_MODULE_2__.default.unauthorizedCommand(model), command);
            return _context3.abrupt("return", model);

          case 12:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _executeCommand.apply(this, arguments);
}

/***/ }),

/***/ "./src/use-cases/fetch-related-models.js":
/*!***********************************************!*\
  !*** ./src/use-cases/fetch-related-models.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ fetchRelatedModels)
/* harmony export */ });
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");


function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


/**
 * @param {import("../models/model").Model} model
 * @param {import("../models".relations)} relation
 */

function fetchRelatedModels(_x, _x2) {
  return _fetchRelatedModels.apply(this, arguments);
}

function _fetchRelatedModels() {
  _fetchRelatedModels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(model, relation) {
    var spec, result, _ref;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            spec = model.getSpec();

            if (!(relation && spec.relations && spec.relations[relation])) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(model[relation]());

          case 4:
            result = _context.sent;

            if (!result.ok) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", (_ref = {}, _defineProperty(_ref, model.getName(), model), _defineProperty(_ref, relation, result.data), _ref));

          case 7:
            return _context.abrupt("return", model);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _fetchRelatedModels.apply(this, arguments);
}

/***/ }),

/***/ "./src/use-cases/find-model.js":
/*!*************************************!*\
  !*** ./src/use-cases/find-model.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ makeFindModel)
/* harmony export */ });
/* harmony import */ var _execute_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./execute-command */ "./src/use-cases/execute-command.js");
/* harmony import */ var _fetch_related_models__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fetch-related-models */ "./src/use-cases/fetch-related-models.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }



/**
 * @typedef {Object} ModelParam
 * @property {String} modelName
 * @property {import('../datasources/datasource').default} repository
 * @property {import('../models/observer').Observer} observer
 * @property {import('../models/index').ModelFactory} models
 * @property {...Function} handlers
 */

/**
 * @callback findModel
 * @param {string} id
 * @param {{key1:string,keyN:string}} query
 * @returns {Promise<import("../models/model").Model>}
 *
 * @param {ModelParam} param0
 * @returns {findModel}
 */

function makeFindModel() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      repository = _ref.repository;

  return /*#__PURE__*/function () {
    var _findModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id, query) {
      var model, related, result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return repository.find(id);

            case 2:
              model = _context.sent;

              if (model) {
                _context.next = 5;
                break;
              }

              throw new Error("no such id");

            case 5:
              if (!(query !== null && query !== void 0 && query.relation)) {
                _context.next = 11;
                break;
              }

              _context.next = 8;
              return (0,_fetch_related_models__WEBPACK_IMPORTED_MODULE_1__.default)(model, query.relation);

            case 8:
              related = _context.sent;

              if (!related) {
                _context.next = 11;
                break;
              }

              return _context.abrupt("return", related);

            case 11:
              if (!(query !== null && query !== void 0 && query.command)) {
                _context.next = 17;
                break;
              }

              _context.next = 14;
              return (0,_execute_command__WEBPACK_IMPORTED_MODULE_0__.default)(model, query.command, "read");

            case 14:
              result = _context.sent;

              if (!result) {
                _context.next = 17;
                break;
              }

              return _context.abrupt("return", result);

            case 17:
              return _context.abrupt("return", model);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function findModel(_x, _x2) {
      return _findModel.apply(this, arguments);
    }

    return findModel;
  }();
}

/***/ }),

/***/ "./src/use-cases/handle-events.js":
/*!****************************************!*\
  !*** ./src/use-cases/handle-events.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateCache": () => (/* binding */ updateCache),
/* harmony export */   "cacheEventHandler": () => (/* binding */ cacheEventHandler),
/* harmony export */   "default": () => (/* binding */ handleEvents)
/* harmony export */ });
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models */ "./src/models/index.js");
/* harmony import */ var _services_publish_event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/publish-event */ "./src/services/publish-event.js");
/* harmony import */ var _services_event_bus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/event-bus */ "./src/services/event-bus.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var BROADCAST = process.env.TOPIC_BROADCAST || "broadcastChannel";
var UPDATE = _models__WEBPACK_IMPORTED_MODULE_0__.default.EventTypes.UPDATE;
var CREATE = _models__WEBPACK_IMPORTED_MODULE_0__.default.EventTypes.CREATE;
var DELETE = _models__WEBPACK_IMPORTED_MODULE_0__.default.EventTypes.DELETE;
/**
 *
 * @param {*} param0
 * @returns
 */

function updateCache(_ref) {
  var datasource = _ref.datasource,
      observer = _ref.observer;
  return /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
      var message, event, model;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              message = _ref2.message;
              event = JSON.parse(message);
              console.log("updateCache called", event.eventName);

              if (!(event.eventName.startsWith(CREATE) || event.eventName.startsWith(UPDATE))) {
                _context.next = 12;
                break;
              }

              console.debug("check if we have the code for this object...");

              if (_models__WEBPACK_IMPORTED_MODULE_0__.default.getModelSpec(event.modelName)) {
                _context.next = 9;
                break;
              }

              console.debug("we don't, import it..."); // Stream the code for the model

              _context.next = 9;
              return (0,_models__WEBPACK_IMPORTED_MODULE_0__.initRemoteCache)(event.modelName);

            case 9:
              console.debug("unmarshal the deserialized model");
              model = _models__WEBPACK_IMPORTED_MODULE_0__.default.loadModel(observer, datasource, event.model, event.modelName);
              return _context.abrupt("return", datasource.save(model.getId(), model));

            case 12:
              if (!event.eventName.startsWith(DELETE)) {
                _context.next = 14;
                break;
              }

              return _context.abrupt("return", datasource["delete"](event.modelId));

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref3.apply(this, arguments);
    };
  }();
}
/**
 * Implement distributed object cache. Find any model
 * referenced by a relation that is not registered in
 * the model factory and listen for remote CRUD events
 * from it. On receipt of the event, import the remote
 * modules for the model and its adapters/services, if
 * they haven't been already, then rehydrate and load
 * the model into the cache.
 */

var cacheEventHandler = function cacheEventHandler(_ref4) {
  var observer = _ref4.observer,
      getDataSource = _ref4.getDataSource;
  return {
    notify: function notify() {
      observer.on(/CREATE|UPDATE|DELETE/, /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(event) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", _services_event_bus__WEBPACK_IMPORTED_MODULE_2__.default.notify(BROADCAST, JSON.stringify(event)));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2);
        }));

        return function (_x2) {
          return _ref5.apply(this, arguments);
        };
      }());
    },
    listen: function listen() {
      var models = _models__WEBPACK_IMPORTED_MODULE_0__.default.getModelSpecs();
      var relations = models.map(function (m) {
        return _objectSpread({}, m.relations);
      });
      var unregistered = relations.filter(function (r) {
        return !models.find(function (m) {
          return m.modelName === r.modelName;
        });
      });
      unregistered.forEach(function (u) {
        Object.keys(u).forEach(function (k) {
          console.debug("modelName", u[k].modelName);
          if (!u[k] || !u[k].modelName) return;
          var datasource = getDataSource(u[k].modelName);
          console.debug("calling listen", u[k]);
          _services_event_bus__WEBPACK_IMPORTED_MODULE_2__.default.listen({
            topic: BROADCAST,
            id: new Date().getTime() + "create",
            callback: updateCache({
              observer: observer,
              datasource: datasource
            }),
            once: false,
            filters: [CREATE.concat(u[k].modelName).toUpperCase()]
          });
          _services_event_bus__WEBPACK_IMPORTED_MODULE_2__.default.listen({
            topic: BROADCAST,
            id: new Date().getTime() + "update",
            callback: updateCache({
              observer: observer,
              datasource: datasource
            }),
            once: false,
            filters: [UPDATE.concat(u[k].modelName).toUpperCase()]
          });
          _services_event_bus__WEBPACK_IMPORTED_MODULE_2__.default.listen({
            topic: BROADCAST,
            id: new Date().getTime() + "delete",
            callback: updateCache({
              observer: observer,
              datasource: datasource
            }),
            once: false,
            filters: [DELETE.concat(u[k].modelName).toUpperCase()]
          });
        });
      });
    }
  };
};
/**
 *
 * @param {import('../models/observer').Observer} observer
 * @param {import('../adapters/event-adapter').EventService} eventService
 */

function handleEvents(observer, getDataSource) {
  //observer.on(/.*/, async event => publishEvent(event));
  // Distributed object cache - must be explicitly enabled
  if (/true/i.test(process.env.DISTRIBUTED_CACHE_ENABLED)) {
    var cache = cacheEventHandler({
      observer: observer,
      getDataSource: getDataSource
    });
    cache.listen();
    cache.notify();
  }
  /**
   * This is the cluster cache sync listener - when data is
   * saved in another process, the master forwards the data to
   * all the other workers, so they can update their cache.
   */


  process.on("message", function (_ref6) {
    var cmd = _ref6.cmd,
        id = _ref6.id,
        pid = _ref6.pid,
        data = _ref6.data,
        name = _ref6.name;

    if (cmd && id && data && process.pid !== pid) {
      if (cmd === "saveCommand") {
        var ds = getDataSource(name);
        ds.clusterSave(id, data);
        return;
      }

      if (cmd === "deleteCommand") {
        var _ds = getDataSource(name);

        _ds.clusterDelete(id);

        return;
      }
    }
  });
}

/***/ }),

/***/ "./src/use-cases/index.js":
/*!********************************!*\
  !*** ./src/use-cases/index.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "registerCacheEvents": () => (/* binding */ registerCacheEvents),
/* harmony export */   "addModels": () => (/* binding */ addModels),
/* harmony export */   "editModels": () => (/* binding */ editModels),
/* harmony export */   "listModels": () => (/* binding */ listModels),
/* harmony export */   "findModels": () => (/* binding */ findModels),
/* harmony export */   "removeModels": () => (/* binding */ removeModels),
/* harmony export */   "loadModels": () => (/* binding */ loadModels),
/* harmony export */   "listConfigs": () => (/* binding */ listConfigs)
/* harmony export */ });
/* harmony import */ var _add_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./add-model */ "./src/use-cases/add-model.js");
/* harmony import */ var _edit_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./edit-model */ "./src/use-cases/edit-model.js");
/* harmony import */ var _list_models__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./list-models */ "./src/use-cases/list-models.js");
/* harmony import */ var _find_model__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./find-model */ "./src/use-cases/find-model.js");
/* harmony import */ var _remove_model__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./remove-model */ "./src/use-cases/remove-model.js");
/* harmony import */ var _load_models__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./load-models */ "./src/use-cases/load-models.js");
/* harmony import */ var _list_configs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./list-configs */ "./src/use-cases/list-configs.js");
/* harmony import */ var _datasources__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../datasources */ "./src/datasources/index.js");
/* harmony import */ var _models_observer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/observer */ "./src/models/observer.js");
/* harmony import */ var _models__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models */ "./src/models/index.js");
/* harmony import */ var _handle_events__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./handle-events */ "./src/use-cases/handle-events.js");













function registerCacheEvents() {
  (0,_handle_events__WEBPACK_IMPORTED_MODULE_10__.default)(_models_observer__WEBPACK_IMPORTED_MODULE_8__.default.getInstance(), function (name) {
    return _datasources__WEBPACK_IMPORTED_MODULE_7__.default.getDataSource(name, true);
  });
}
/**
 *
 * @param {import('../models').ModelSpecification} model
 */

function buildOptions(model) {
  return {
    modelName: model.modelName,
    models: _models__WEBPACK_IMPORTED_MODULE_9__.default,
    observer: _models_observer__WEBPACK_IMPORTED_MODULE_8__.default.getInstance(),
    handlers: model.eventHandlers,
    repository: _datasources__WEBPACK_IMPORTED_MODULE_7__.default.getDataSource(model.modelName)
  };
}

function make(factory) {
  var models = _models__WEBPACK_IMPORTED_MODULE_9__.default.getRemoteModels();
  return models.map(function (model) {
    return {
      endpoint: model.endpoint,
      fn: factory(buildOptions(model))
    };
  });
}

var addModels = function addModels() {
  return make(_add_model__WEBPACK_IMPORTED_MODULE_0__.default);
};
var editModels = function editModels() {
  return make(_edit_model__WEBPACK_IMPORTED_MODULE_1__.default);
};
var listModels = function listModels() {
  return make(_list_models__WEBPACK_IMPORTED_MODULE_2__.default);
};
var findModels = function findModels() {
  return make(_find_model__WEBPACK_IMPORTED_MODULE_3__.default);
};
var removeModels = function removeModels() {
  return make(_remove_model__WEBPACK_IMPORTED_MODULE_4__.default);
};
var loadModels = function loadModels() {
  return make(_load_models__WEBPACK_IMPORTED_MODULE_5__.default);
};
var listConfigs = function listConfigs() {
  return (0,_list_configs__WEBPACK_IMPORTED_MODULE_6__.default)({
    models: _models__WEBPACK_IMPORTED_MODULE_9__.default
  });
};

/***/ }),

/***/ "./src/use-cases/invoke-port.js":
/*!**************************************!*\
  !*** ./src/use-cases/invoke-port.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ invokePort)
/* harmony export */ });
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");
/* harmony import */ var _lib_check_acl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/check-acl */ "./src/lib/check-acl.js");


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




function portAuthorized(spec, port, permission) {
  return port && spec.ports && spec.ports[port] && (0,_lib_check_acl__WEBPACK_IMPORTED_MODULE_1__.default)("write", permission);
}
/**
 *
 * @param {import("../models/model-factory").ModelFactory} models
 * @param {import("../models/model").Model} model
 * @param {{port:string}} query
 */


function invokePort(_x, _x2, _x3) {
  return _invokePort.apply(this, arguments);
}

function _invokePort() {
  _invokePort = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(model, port, permission) {
    var spec, callback, _result, result;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            spec = model.getSpec();

            if (!portAuthorized(spec, port, permission)) {
              _context.next = 14;
              break;
            }

            callback = spec.ports[port].callback;

            if (!callback) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(model[port](callback));

          case 6:
            _result = _context.sent;

            if (!_result.ok) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", _objectSpread(_objectSpread({}, model), _result.data));

          case 9:
            _context.next = 11;
            return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(model[port]());

          case 11:
            result = _context.sent;

            if (!result.ok) {
              _context.next = 14;
              break;
            }

            return _context.abrupt("return", _objectSpread(_objectSpread({}, model), result.data));

          case 14:
            return _context.abrupt("return", model);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _invokePort.apply(this, arguments);
}

/***/ }),

/***/ "./src/use-cases/list-configs.js":
/*!***************************************!*\
  !*** ./src/use-cases/list-configs.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ listConfigsFactory)
/* harmony export */ });


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function listConfigsFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      models = _ref.models;

  return /*#__PURE__*/function () {
    var _listConfigs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", models.getRemoteModels());

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function listConfigs() {
      return _listConfigs.apply(this, arguments);
    }

    return listConfigs;
  }();
}

/***/ }),

/***/ "./src/use-cases/list-models.js":
/*!**************************************!*\
  !*** ./src/use-cases/list-models.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ makeListModels)
/* harmony export */ });


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var DateFunctions = {
  today: function today(list) {
    return list.filter(function (m) {
      return new Date(m.createTime).getDate() === new Date().getDate();
    }).length;
  },
  yesterday: function yesterday(list) {
    return list.filter(function (m) {
      return new Date(m.createTime).getDate() === new Date().getDate() - 1;
    }).length;
  },
  thisMonth: function thisMonth(list) {
    return list.filter(function (m) {
      return new Date(m.createTime).getMonth() === new Date().getMonth();
    }).length;
  },
  lastMonth: function lastMonth(list) {
    return list.filter(function (m) {
      return new Date(m.createTime).getMonth() === new Date().getMonth() - 1;
    }).length;
  }
};
/**
 *
 * @param {*} query
 * @param {import("../datasources/datasource").default} repository
 * @returns
 */

function parseQuery(_x, _x2) {
  return _parseQuery.apply(this, arguments);
}
/**
 * @callback listModels
 * @param {{key1:string, keyN:string}} query
 * @returns {Promise<Array<import("../models/model").Model)>>}
 *
 * @param {{repository:import('../datasources/datasource').default}}
 * @returns {listModels}
 */


function _parseQuery() {
  _parseQuery = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(query, repository) {
    var dateFunc, list, searchTerms, filter, filteredList;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(query !== null && query !== void 0 && query.count)) {
              _context2.next = 22;
              break;
            }

            if (!(typeof query.count === "number")) {
              _context2.next = 3;
              break;
            }

            return _context2.abrupt("return", repository.list(query));

          case 3:
            dateFunc = DateFunctions[query.count];

            if (!dateFunc) {
              _context2.next = 9;
              break;
            }

            _context2.next = 7;
            return repository.list();

          case 7:
            list = _context2.sent;
            return _context2.abrupt("return", {
              count: dateFunc(list)
            });

          case 9:
            searchTerms = query.count.split(":");

            if (!(searchTerms.length > 1)) {
              _context2.next = 16;
              break;
            }

            filter = _defineProperty({}, searchTerms[0], searchTerms[1]);
            _context2.next = 14;
            return repository.list(filter);

          case 14:
            filteredList = _context2.sent;
            return _context2.abrupt("return", _objectSpread(_objectSpread({}, filter), {}, {
              count: filteredList.length
            }));

          case 16:
            _context2.next = 18;
            return repository.list(null, false);

          case 18:
            _context2.t0 = _context2.sent.length;
            _context2.t1 = repository.getCacheSize();
            _context2.t2 = repository.getCacheSizeBytes();
            return _context2.abrupt("return", {
              total: _context2.t0,
              cached: _context2.t1,
              bytes: _context2.t2
            });

          case 22:
            return _context2.abrupt("return", repository.list(query));

          case 23:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _parseQuery.apply(this, arguments);
}

function makeListModels() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      repository = _ref.repository;

  return /*#__PURE__*/function () {
    var _listModels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(query) {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", parseQuery(query, repository));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function listModels(_x3) {
      return _listModels.apply(this, arguments);
    }

    return listModels;
  }();
}

/***/ }),

/***/ "./src/use-cases/load-models.js":
/*!**************************************!*\
  !*** ./src/use-cases/load-models.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _lib_serializer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/serializer */ "./src/lib/serializer.js");
/* harmony import */ var _resume_workflow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./resume-workflow */ "./src/use-cases/resume-workflow.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



/**
 * @param {function(import("../models").Model)} loadModel
 * @param {import("../models/observer").Observer} observer
 * @param {import("../datasources/datasource").default} repository
 * @returns {function(Map<string,Model>|Model)}
 */

function hydrateModels(loadModel, observer, repository) {
  return function (saved) {
    if (!saved) return;

    if (saved instanceof Map) {
      return new Map(_toConsumableArray(saved).map(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

        var model = loadModel(observer, repository, v, v.modelName);
        return [k, model];
      }));
    }

    if (Object.getOwnPropertyNames(saved).includes("modelName")) {
      return loadModel(observer, repository, saved, saved.modelName);
    }
  };
}

function handleError(e) {
  console.error(e);
}
/**
 *
 * @param {import("../datasources/datasource").default} repository
 */


function handleRestart(repository) {
  // console.log("resuming workflow", repository.name);
  repository.list().then(_resume_workflow__WEBPACK_IMPORTED_MODULE_1__.default)["catch"](handleError);
}
/**
 * Factory returns function to unmarshal deserialized models
 * @typedef {import('../models').Model} Model
 * @param {{
 *  models:import('../models/model-factory').ModelFactory,
 *  observer:import('../models/observer').Observer,
 *  repository:import('../datasources/datasource').default,
 *  modelName:string
 * }} options
 */


/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(_ref3) {
  var models = _ref3.models,
      observer = _ref3.observer,
      repository = _ref3.repository,
      modelName = _ref3.modelName;
  return /*#__PURE__*/function () {
    var _loadModels = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var spec;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              spec = models.getModelSpec(modelName);
              setTimeout(handleRestart, 30000, repository);
              return _context.abrupt("return", repository.load({
                hydrate: hydrateModels(models.loadModel, observer, repository),
                serializer: _lib_serializer__WEBPACK_IMPORTED_MODULE_0__.default.addSerializer(spec.serializers)
              }));

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function loadModels() {
      return _loadModels.apply(this, arguments);
    }

    return loadModels;
  }();
}

/***/ }),

/***/ "./src/use-cases/remove-model.js":
/*!***************************************!*\
  !*** ./src/use-cases/remove-model.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ removeModelFactory)
/* harmony export */ });

/**
 * @typedef {Object} ModelParam
 * @property {String} modelName
 * @property {import('../models').ModelFactory} models
 * @property {import('../datasources/datasource').default} repository
 * @property {import('../models/observer').Observer} observer
 * @property {...Function} handlers
 */

/**
 * @callback removeModel
 * @param {string} id
 * @returns {Promise<import("../models").Model>}
 */

/**
 * @param {ModelParam} param0
 * @returns {removeModel}
 */

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function removeModelFactory() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      modelName = _ref.modelName,
      models = _ref.models,
      repository = _ref.repository,
      observer = _ref.observer,
      _ref$handlers = _ref.handlers,
      handlers = _ref$handlers === void 0 ? [] : _ref$handlers;

  var eventType = models.EventTypes.DELETE;
  var eventName = models.getEventName(eventType, modelName);
  handlers.forEach(function (handler) {
    return observer.on(eventName, handler);
  });
  return /*#__PURE__*/function () {
    var _removeModel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(id) {
      var model, deleted, event, _yield$Promise$allSet, _yield$Promise$allSet2, obsResult, repoResult;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return repository.find(id);

            case 2:
              model = _context.sent;

              if (model) {
                _context.next = 5;
                break;
              }

              throw new Error("no such id");

            case 5:
              deleted = models.deleteModel(model);
              _context.next = 8;
              return models.createEvent(eventType, modelName, deleted);

            case 8:
              event = _context.sent;
              _context.next = 11;
              return Promise.allSettled([observer.notify(event.eventName, event), repository["delete"](id)]);

            case 11:
              _yield$Promise$allSet = _context.sent;
              _yield$Promise$allSet2 = _slicedToArray(_yield$Promise$allSet, 2);
              obsResult = _yield$Promise$allSet2[0];
              repoResult = _yield$Promise$allSet2[1];

              if (!(obsResult.status === "rejected")) {
                _context.next = 20;
                break;
              }

              if (!(repoResult.status === "fulfilled")) {
                _context.next = 19;
                break;
              }

              _context.next = 19;
              return repository.save(id, model);

            case 19:
              throw new Error("model not deleted", obsResult.reason);

            case 20:
              return _context.abrupt("return", model);

            case 21:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function removeModel(_x) {
      return _removeModel.apply(this, arguments);
    }

    return removeModel;
  }();
}

/***/ }),

/***/ "./src/use-cases/resume-workflow.js":
/*!******************************************!*\
  !*** ./src/use-cases/resume-workflow.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ resumeWorkflow)
/* harmony export */ });
/* harmony import */ var _lib_async_error__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/async-error */ "./src/lib/async-error.js");


function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }


/**
 * Check `portFlow` history and resume any workflow
 * that was running before we shut down.
 *
 * @param {function(Model):string[]} getPortFlow history of port calls
 * @param {import("../models").ports} ports
 * @returns {function(Map<string,Model>)}
 */

function resumeWorkflow(_x) {
  return _resumeWorkflow.apply(this, arguments);
}

function _resumeWorkflow() {
  _resumeWorkflow = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(list) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!((list === null || list === void 0 ? void 0 : list.length) > 0)) {
              _context2.next = 3;
              break;
            }

            _context2.next = 3;
            return Promise.all(list.map( /*#__PURE__*/function () {
              var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(model) {
                var history, ports, lastPort, nextPort;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        history = model.getPortFlow();
                        ports = model.getSpec().ports;

                        if (!((history === null || history === void 0 ? void 0 : history.length) > 0 && !model.compensate)) {
                          _context.next = 8;
                          break;
                        }

                        lastPort = history.length - 1;
                        nextPort = ports[history[lastPort]].producesEvent;

                        if (!(nextPort && nextPort !== "workflowComplete")) {
                          _context.next = 8;
                          break;
                        }

                        _context.next = 8;
                        return (0,_lib_async_error__WEBPACK_IMPORTED_MODULE_0__.default)(model.emit(nextPort, resumeWorkflow.name));

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));

              return function (_x2) {
                return _ref.apply(this, arguments);
              };
            }()))["catch"](function (error) {
              return console.error(error);
            });

          case 3:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _resumeWorkflow.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/mongodb/lib/core/connection sync recursive":
/*!********************************************************!*\
  !*** ./node_modules/mongodb/lib/core/connection/ sync ***!
  \********************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/mongodb/lib/core/connection sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./node_modules/mongodb/lib/core sync recursive":
/*!*********************************************!*\
  !*** ./node_modules/mongodb/lib/core/ sync ***!
  \*********************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/mongodb/lib/core sync recursive";
module.exports = webpackEmptyContext;

/***/ })

};
;
//# sourceMappingURL=src_server_js-node_modules_mongodb_lib_core_connection_sync_recursive-node_modules_mongodb_li-deeaa8.js.map